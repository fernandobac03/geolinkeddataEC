/** OpenMapJS 
 *** Copyright(C) 2016 - Marcelo Cajamarca <marcelocaj@gmail.com>
 *** GNU/LGPL v3 License.
 ***/
var app = angular.module("openMapJs", ["ngResource"]);
app.factory("SparqlEndpoint", ["$rootScope", "$http", "$resource",
    function (e, t, n)
    {
        var o = null,
                i = function (t) {
                    this.initialize = function () {
                        o = t
                    },
                            this.obtainWkt = function (e) {
                                results = e.results.bindings, angular.forEach(results, function (e, t) {
                                    return strWkt = e.kml.value, strWkt
                                })
                            }, this.requestAllClasses = function () {
                        var t = 'PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> '
                                + 'PREFIX geo: <http://www.opengis.net/ont/geosparql#> '
                                + 'SELECT DISTINCT ?class ?label '
                                + 'WHERE { '
				+ '     graph <http://linkeddata.ec> { '
                                + '        ?class rdfs:subClassOf geo:Feature. '
                                + '        Optional { ?class rdfs:label ?label } '
				+ ' 	} '
                                + '} LIMIT ' + e.config.endpoint.maxResults;
                        return this.sendQuery(t)
                    }, this.getResultList = function (e) {
                        return e.results.bindings
                    }, this.sendQuery = function (e) {
                        var t = function (e) {
                            return $.param(e)
                        }, i = n(o, {}, {
                            querySrv: {method: "POST", isArray: !1, transformRequest: t, headers: {"Content-Type": "application/x-www-form-urlencoded; charset=UTF-8", Accept: "application/json"}}
                        });
                        return i.querySrv({query: e, output: "json"}).$promise
                    }, this.sendRequest = function (t) {
                        var n = 'PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> '
                                + ' PREFIX geo: <http://www.opengis.net/ont/geosparql#> '
                                + ' PREFIX geoec: <http://linkeddata.ec/ontology#> '
                                + ' PREFIX owl: <http://www.w3.org/2002/07/owl#> '
                                + ' SELECT DISTINCT ?label ?wkt ?sameAs ?polaridad ?valor_polaridad ?tipo_lugar ?total_opiniones'
                                + ' WHERE { '
				+ '	    ?a a <' + t + '> . '
                                + '         ?a rdfs:label ?label . '
                                + '         ?a geo:hasGeometry ?b . '
                                + '         ?b geo:asWKT ?wkt .'
                                + '         OPTIONAL { ?a owl:sameAs  ?sameAs. '
                                + '         filter (regex(?sameAs, "dbpedia", "i")) } .'
                                + '         OPTIONAL { ?a geoec:polaridad ?polaridad  } .'
                                + '         OPTIONAL { ?a geoec:valor_polaridad ?valor_polaridad  } .'
                                + '         OPTIONAL { ?a geoec:tipo_lugar ?tipo_lugar  } .'
                                + '         OPTIONAL { ?a geoec:total_opiniones ?total_opiniones  } .'
                                + '} LIMIT ' + e.config.endpoint.maxResults;
                        return this.sendQuery(n)
                    }, this.initialize()
                };
        return i
    }]),
        app.factory("Map", ["$http", function (e) {
                var colors = ["blue", "green", "orange"];
                var t, n = null, o = new ol.source.Vector({}),
                        i = "http://www.opengis.net/def/crs/EPSG/0/",
                        r = null, a = null, b = null,
                        s = document.getElementById("popup"),
                        l = function (e) {
                            this.initialize = function () {
                                t = e, 
				a = new ol.style.Style({
                                    image: new ol.style.Icon({
                                        anchor: [.5, 30], anchorXUnits: "fraction", anchorYUnits: "pixels", src: "http://linkeddata.ec/openmaps/images/negativo.png"})
                                });
				
				estiloNeutral = new ol.style.Style({
                                    image: new ol.style.Icon({
                                        anchor: [.2, 2], anchorXUnits: "fraction", anchorYUnits: "pixels", src: "http://linkeddata.ec/openmaps/images/neutral.png"})
                                });

				estiloPositivo = new ol.style.Style({
                                    image: new ol.style.Icon({
                                        anchor: [.2, 2], anchorXUnits: "fraction", anchorYUnits: "pixels", src: "http://linkeddata.ec/openmaps/images/positivo.png"})
                                });


                                b = new ol.style.Style({
                                    stroke: new ol.style.Stroke({
                                        color: 'green',
                                        width: 1
                                    }),
                                    fill: new ol.style.Fill({
                                        color: 'rgba('+parseInt((Math.random() * 256))+','+parseInt((Math.random() * 256))+', 0, 0.3)'
                                 //       color: colors[parseInt((Math.random() * 3))]
                                    })
                                })

                            }, this.isInt = function (e) {
                                return Number(e) === e && e % 1 === 0
                            }, this.removeFeatures = function (e) {
                                var t = o.getFeatures();
                                angular.forEach(t, function (t, n) {
                                    t.idUriClass == e && o.removeFeature(t)
                                })
                            }, this.graphicQueryResponse = function (e, t) {
                                var r = e.results.bindings, s = this;
                                angular.forEach(r, function (e, n) {
                                    var r = e.wkt.value, l = e.label.value, 
                                            sa = e.sameAs ? e.sameAs.value : null,
                                            polaridad = e.polaridad ? e.polaridad.value : null,
                                            valor_polaridad = e.valor_polaridad ? e.valor_polaridad.value : null,
                                            tipo_lugar = e.tipo_lugar ? e.tipo_lugar.value : null,
                                            total_opiniones = e.total_opiniones ? e.total_opiniones.value : null,
                                            u = r.substr(0, r.indexOf(" ")),
                                            c = r.substr(r.indexOf(" ") + 1),
                                            p = u.substring(i.length + 1, u.length - 1).replace("<" + i).replace(">", ""),
                                            d = new ol.format.WKT, f = null;
                                    f = s.isInt(p) && 4326 != p ? d.readFeature(c, {dataProjection: "EPSG:" + p, featureProjection: "EPSG:4326"}) : d.readFeature(c), f.label = l, f.sameAs = sa, f.polaridad = polaridad, f.valor_polaridad = valor_polaridad, f.tipo_lugar = tipo_lugar, f.total_opiniones = total_opiniones, f.idUriClass = t;
                                    var g = f.getGeometry().getType();
                                    	"Point" == g && valor_polaridad ? ( valor_polaridad > 0 ? f.setStyle(estiloPositivo) : valor_polaridad < 0 ? f.setStyle(estiloNegativo) : f.setStyle(estiloNeutral) ) : f.setStyle(a),
				 	"MultiPolygon" == g && f.setStyle(b), o.addFeature(f)
                                }), n.getView().fit(o.getExtent(), n.getSize());
                                var l = o.getFeatures().length;
                                n.getView().getZoom() > 22 && 5 > l && n.getView().setZoom(17)
                            }, this.removeInfoPopup = function () {
                                $(s).popover("destroy")
                            }, this.createPopupEvents = function () {
                                n.on("pointermove", function (e) {
                                    return e.dragging ? void $(s).popover("destroy") : void 0
                                }), n.on("click", function (e) {
                                    var t = e.coordinate, o = n.forEachFeatureAtPixel(e.pixel, function (e, t) {
                                        return e
                                    });




                                    if (o) {
                                        r.setPosition(t);
                                        var i = $("div.popover:visible").length > 0, a = "Long: " + t[0] + "<br/> Lat: " + t[1] 
                                                        + (o.sameAs ? "<br/> dbpedia: <a target=\"black\" href=\"" + o.sameAs + "\">" + o.sameAs + "</a>" : "")   
							+ (o.tipo_lugar ? "<br/> Tipo de lugar: " + o.tipo_lugar : "")  
							+ (o.total_opiniones ? "<br/> NÃºmero de opiniones analizadas: " + o.total_opiniones : "")
							+ (o.polaridad ? "<br/> Polaridad: " + o.polaridad : "")  
							+ (o.valor_polaridad ? "<br/> Valor detectado de la polaridad: " + o.valor_polaridad : "")  
							,l = o.label;
                                        i ? ($(s).data("bs.popover").options.content = a, $(s).data("bs.popover").options.title = l) : $(s).popover({trigger: "manual", placement: "top", html: !0, title: l, container: "body", content: a}), $(s).popover("show")
                                    } else
                                        $(s).popover("destroy")
                                })
                            }, this.updateMapSize = function () {
                                n.updateSize()
                            }, this.createMap = function () {
                                r = new ol.Overlay({element: s, positioning: "bottom-center"}), n = new ol.Map({target: t, overlays: [r], layers: [new ol.layer.Tile({source: new ol.source.OSM}), new ol.layer.Vector({source: o})], view: new ol.View({projection: ol.proj.get("EPSG:4326"), center: [0, 0], zoom: 4, minZoom: 2, maxZoom: 28})}), this.createPopupEvents(), $.getJSON("http://www.geoplugin.net/json.gp?jsoncallback=?", function (e) {
                                    n.getView().setCenter([e.geoplugin_longitude, e.geoplugin_latitude]), n.getView().setZoom(5)
                                })
                            }, this.clearMap = function () {
                                o.clear(!0), this.removeInfoPopup()
                            }, this.getOlMap = function () {
                                return n
                            }, this.initialize()
                        };
                return l
            }]), app.controller("OpenMapJsController", ["$scope", "$document", "$http", "$resource", "$rootScope", "Map", "SparqlEndpoint", function (e, t, n, o, i, r, a) {
        e.Version = "1.0 Beta", e.idMapControl = "map", e.map = null, e.endpoint = null, e.selected = [], e.entities = [], e.classUris = [], t.ready(function () {
            var t = ' - Â© <a href="https://github.com/marcelocaj/openmapjs" target="_blank">OpenMapJS ' + e.Version + "</a>";
            setTimeout(function () {
                $(".ol-attribution").find("ul").append(t)
            }, 1500)
        });
        var s = function (t, n, o) {
            if (e.map.removeInfoPopup(), "add" === t && -1 === e.selected.indexOf(n)) {
                $(".overlay").show(), e.selected.push(n), console.log("uriClass:" + o);
                var i = e.endpoint.sendRequest(o);
                i.then(function (t) {
                    $(".overlay").hide(), e.map.graphicQueryResponse(t, n)
                }, function (e) {
                    $(".overlay").hide()
                })
            }
            "remove" === t && -1 !== e.selected.indexOf(n) && ($(".overlay").show(), e.selected.splice(e.selected.indexOf(n), 1), e.map.removeFeatures(n), $(".overlay").hide())
        };
        e.updateSelection = function (e, t, n) {
            var o = e.target, i = o.checked ? "add" : "remove";
            s(i, t, n)
        }, e.selectAll = function (t) {
            for (var n = t.target, o = n.checked ? "add" : "remove", i = 0; i < e.entities.length; i++) {
                var r = e.entities[i];
                s(o, r.id)
            }
        }, e.getSelectedClass = function (t) {
            return e.isSelected(t.id) ? "selected" : ""
        }, e.isSelected = function (t) {
            return e.selected.indexOf(t) >= 0
        }, e.isSelectedAll = function () {
            return e.selected.length === e.entities.length
        }, e.loadJSON = function (e) {
            $.ajaxSetup({async: !1});
            var t = $.getJSON(e);
            return $.ajaxSetup({async: !0}), t.responseJSON
        }, e.init = function () {
            i.config = e.loadJSON("config.json"), e.endpoint = new a(i.config.endpoint.url), e.map = new r("map"), e.listAllClasses(), e.map.createMap()
        }, e.listAllClasses = function () {
            var t = e.endpoint.requestAllClasses();
            t.then(function (t) {
                var n = e.endpoint.getResultList(t);
                e.entities = [];
                var o = 0;
                angular.forEach(n, function (t, n) {
                    var i = t["class"].value;
                    var label = t["label"] ? t["label"].value : t["class"].value;
                    e.entities.push({id: o, uriClass: i, labelClass: label}), o++
                })
            }, function (t) {
                var n = $("#warning-alert");
                $("#container");
                null != n && (n.find(".alert-text").html("<strong>Warning!</strong> Could not connect to the endpoint."), n.show(), e.resizeLayout())
            })
        }, e.resizeLayout = function () {
            null != myLayout && myLayout.resizeAll()
        }, e.updateMapSize = function () {
            e.map.updateMapSize()
        }, e.clearMap = function () {
            e.map.clearMap(), e.selected = []
        }, e.sendQuery = function () {
            var t = e.endpoint.sendRequest();
            t.then(function (t) {
                e.map.graphicQueryResponse(t)
            })
        }, e.init()
    }]);
